// =======================
// script.js
// =======================
let model;
const CLASS_NAMES = [
  // ‚ö†Ô∏è ƒêi·ªÅn ƒë·∫ßy ƒë·ªß t√™n class ƒë√£ train (v√≠ d·ª• trong PlantVillage)
  "Apple___Apple_scab",
  "Apple___Black_rot",
  "Apple___Cedar_apple_rust",
  "Apple___healthy",
  "Corn___Cercospora_leaf_spot",
  "Corn___Common_rust",
  "Corn___Northern_Leaf_Blight",
  "Corn___healthy",
    "Grape___Black_rot",
    "Grape___Esca_(Black_Measles)",
    "Grape___healthy",
];

const video = document.getElementById('camera');
const captureBtn = document.getElementById('capture');
const snapshotCanvas = document.getElementById('snapshot');
const resultDiv = document.getElementById('result');
const ctx = snapshotCanvas.getContext('2d');

// =======================
// K·∫øt n·ªëi camera
// =======================
async function setupCamera() {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
    video.srcObject = stream;
    await video.play();
  } catch (err) {
    console.error("Kh√¥ng th·ªÉ truy c·∫≠p camera:", err);
    resultDiv.innerText = "‚ö†Ô∏è Kh√¥ng th·ªÉ truy c·∫≠p camera!";
  }
}

// =======================
// Load AI model TF.js
// =======================
async function loadModel() {
  resultDiv.innerText = "‚åõ ƒêang load model AI...";
  try {
    model = await tf.loadLayersModel("plant_model_js/model.json");
    resultDiv.innerText = "‚úÖ Model AI ƒë√£ s·∫µn s√†ng!";
    console.log("Model loaded!");
  } catch (err) {
    console.error("Kh√¥ng th·ªÉ load model:", err);
    resultDiv.innerText = "‚ö†Ô∏è Kh√¥ng th·ªÉ load model AI! L·ªói: " + err.message;
  }
}

// =======================
// Ch·ª•p ·∫£nh v√† d·ª± ƒëo√°n
// =======================
captureBtn.addEventListener("click", async () => {
  if (!model) {
    alert("Model ch∆∞a load xong!");
    return;
  }

  snapshotCanvas.width = video.videoWidth;
  snapshotCanvas.height = video.videoHeight;
  ctx.drawImage(video, 0, 0, snapshotCanvas.width, snapshotCanvas.height);

  let tensor = tf.browser.fromPixels(snapshotCanvas)
    .resizeNearestNeighbor([224, 224]) // ‚ö†Ô∏è ch·ªânh theo k√≠ch th∆∞·ªõc train
    .toFloat()
    .expandDims();

  // Chu·∫©n h√≥a [-1,1] n·∫øu d√πng MobileNetV2
  const offset = tf.scalar(127.5);
  tensor = tensor.sub(offset).div(offset);

  try {
    const predictions = await model.predict(tensor).data();
    const maxIndex = predictions.indexOf(Math.max(...predictions));
    const predictedClass = CLASS_NAMES[maxIndex] || "Unknown";
    const confidence = (predictions[maxIndex] * 100).toFixed(2);

    resultDiv.innerHTML = `
      üåø Prediction: <b>${predictedClass}</b><br>
      üìä Confidence: ${confidence}%
    `;
  } catch (err) {
    console.error("L·ªói khi d·ª± ƒëo√°n:", err);
    resultDiv.innerText = "‚ö†Ô∏è L·ªói khi d·ª± ƒëo√°n!";
  }
});

// =======================
// Kh·ªüi t·∫°o
// =======================
setupCamera();
loadModel();
